/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

export interface CoinBridgeTokenInterface extends ethers.utils.Interface {
  functions: {
    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "CANCEL_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "version()": FunctionFragment;
    "addAdministrator(address)": FunctionFragment;
    "addRealmAdministrator(address)": FunctionFragment;
    "addSeizer(address)": FunctionFragment;
    "addSupplier(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizationStates(address,bytes32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bulkTransfer(address[],uint256[])": FunctionFragment;
    "bulkTransferFrom(address,address[],uint256[])": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "canTransfer(address,address,uint256)": FunctionFragment;
    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "contact()": FunctionFragment;
    "convertTo(uint256,string,uint8)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "decreaseApprovalWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "increaseApprovalWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isAdministrator(address)": FunctionFragment;
    "isRealmAdministrator(address)": FunctionFragment;
    "isSeizer(address)": FunctionFragment;
    "isSupplier(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "processor()": FunctionFragment;
    "realm()": FunctionFragment;
    "removeAdministrator(address)": FunctionFragment;
    "removeRealmAdministrator(address)": FunctionFragment;
    "removeSeizer(address)": FunctionFragment;
    "removeSupplier(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rule(uint256)": FunctionFragment;
    "rules()": FunctionFragment;
    "seize(address,uint256)": FunctionFragment;
    "setContact(string)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setProcessor(address)": FunctionFragment;
    "setRealm(address)": FunctionFragment;
    "setRules(uint256[],uint256[])": FunctionFragment;
    "setTrustedIntermediaries(address[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "trustedIntermediaries()": FunctionFragment;
    "upgradeToV2()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRealmAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addSeizer", values: [string]): string;
  encodeFunctionData(functionFragment: "addSupplier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationStates",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bulkTransfer",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkTransferFrom",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuthorization",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "contact", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertTo",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseApprovalWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApprovalWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRealmAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isSeizer", values: [string]): string;
  encodeFunctionData(functionFragment: "isSupplier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "processor", values?: undefined): string;
  encodeFunctionData(functionFragment: "realm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRealmAdministrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeizer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rule", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rules", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setContact", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRealm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRules",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedIntermediaries",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIntermediaries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToV2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRealmAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSeizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convertTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApprovalWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApprovalWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRealmAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSeizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSupplier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "processor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "realm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRealmAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSeizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setContact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRealm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedIntermediaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIntermediaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToV2",
    data: BytesLike
  ): Result;

  events: {
    "AdministratorAdded(address)": EventFragment;
    "AdministratorRemoved(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizationCanceled(address,bytes32)": EventFragment;
    "AuthorizationUsed(address,bytes32)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "ContactSet(string)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceOracleChanged(address)": EventFragment;
    "ProcessorChanged(address)": EventFragment;
    "RealmAdministratorAdded(address)": EventFragment;
    "RealmAdministratorRemoved(address)": EventFragment;
    "RealmChanged(address)": EventFragment;
    "RulesChanged(uint256[],uint256[])": EventFragment;
    "Seize(address,uint256)": EventFragment;
    "SeizerAdded(address)": EventFragment;
    "SeizerRemoved(address)": EventFragment;
    "SupplierAdded(address)": EventFragment;
    "SupplierRemoved(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TrustedIntermediariesChanged(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdministratorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdministratorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContactSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmAdministratorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmAdministratorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Seize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeizerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeizerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplierRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedIntermediariesChanged"
  ): EventFragment;
}

export type AdministratorAddedEvent = TypedEvent<
  [string] & { administrator: string }
>;

export type AdministratorRemovedEvent = TypedEvent<
  [string] & { administrator: string }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type AuthorizationCanceledEvent = TypedEvent<
  [string, string] & { authorizer: string; nonce: string }
>;

export type AuthorizationUsedEvent = TypedEvent<
  [string, string] & { authorizer: string; nonce: string }
>;

export type BurnEvent = TypedEvent<
  [string, BigNumber] & { from: string; amount: BigNumber }
>;

export type ContactSetEvent = TypedEvent<[string] & { contact: string }>;

export type MintEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceOracleChangedEvent = TypedEvent<
  [string] & { newPriceOracle: string }
>;

export type ProcessorChangedEvent = TypedEvent<
  [string] & { newProcessor: string }
>;

export type RealmAdministratorAddedEvent = TypedEvent<
  [string] & { administrator: string }
>;

export type RealmAdministratorRemovedEvent = TypedEvent<
  [string] & { administrator: string }
>;

export type RealmChangedEvent = TypedEvent<[string] & { newRealm: string }>;

export type RulesChangedEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    newRules: BigNumber[];
    newRulesParams: BigNumber[];
  }
>;

export type SeizeEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type SeizerAddedEvent = TypedEvent<[string] & { seizer: string }>;

export type SeizerRemovedEvent = TypedEvent<[string] & { seizer: string }>;

export type SupplierAddedEvent = TypedEvent<[string] & { supplier: string }>;

export type SupplierRemovedEvent = TypedEvent<[string] & { supplier: string }>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type TrustedIntermediariesChangedEvent = TypedEvent<
  [string[]] & { newTrustedIntermediaries: string[] }
>;

export interface CoinBridgeToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(  
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoinBridgeTokenInterface;

  functions: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;
    version(overrides?: CallOverrides): Promise<[string]>;

    addAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizationStates(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkTransfer(
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkTransferFrom(
      _from: string,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contact(overrides?: CallOverrides): Promise<[string]>;

    convertTo(
      _amount: BigNumberish,
      _currency: string,
      maxDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      owner: string,
      processor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,string,string,uint8,address[])"(
      owner: string,
      processor: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      trustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSeizer(_seizer: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    processor(overrides?: CallOverrides): Promise<[string]>;

    realm(overrides?: CallOverrides): Promise<[string]>;

    removeAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rule(
      ruleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rules(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    seize(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContact(
      __contact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProcessor(
      newProcessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRealm(
      newRealm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRules(
      newRules: BigNumberish[],
      newRulesParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedIntermediaries(
      newTrustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedIntermediaries(overrides?: CallOverrides): Promise<[string[]]>;

    upgradeToV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  APPROVE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;
  version(overrides?: CallOverrides): Promise<string>;

  addAdministrator(
    _administrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRealmAdministrator(
    _administrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeizer(
    _seizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupplier(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveWithAuthorization(
    owner: string,
    spender: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizationStates(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bulkTransfer(
    _to: string[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkTransferFrom(
    _from: string,
    _to: string[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  cancelAuthorization(
    authorizer: string,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contact(overrides?: CallOverrides): Promise<string>;

  convertTo(
    _amount: BigNumberish,
    _currency: string,
    maxDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseApprovalWithAuthorization(
    owner: string,
    spender: string,
    decrement: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseApproval(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseApprovalWithAuthorization(
    owner: string,
    spender: string,
    increment: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    owner: string,
    processor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,string,string,uint8,address[])"(
    owner: string,
    processor: string,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    trustedIntermediaries: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdministrator(
    _administrator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRealmAdministrator(
    _administrator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSeizer(_seizer: string, overrides?: CallOverrides): Promise<boolean>;

  isSupplier(_supplier: string, overrides?: CallOverrides): Promise<boolean>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  processor(overrides?: CallOverrides): Promise<string>;

  realm(overrides?: CallOverrides): Promise<string>;

  removeAdministrator(
    _administrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRealmAdministrator(
    _administrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSeizer(
    _seizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupplier(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rule(
    ruleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  rules(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

  seize(
    _account: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContact(
    __contact: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    newPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProcessor(
    newProcessor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRealm(
    newRealm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRules(
    newRules: BigNumberish[],
    newRulesParams: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedIntermediaries(
    newTrustedIntermediaries: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWithAuthorization(
    from: string,
    to: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedIntermediaries(overrides?: CallOverrides): Promise<string[]>;

  upgradeToV2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;
    version(overrides?: CallOverrides): Promise<string>;

    addAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSeizer(_seizer: string, overrides?: CallOverrides): Promise<void>;

    addSupplier(_supplier: string, overrides?: CallOverrides): Promise<void>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizationStates(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkTransfer(
      _to: string[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkTransferFrom(
      _from: string,
      _to: string[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    contact(overrides?: CallOverrides): Promise<string>;

    convertTo(
      _amount: BigNumberish,
      _currency: string,
      maxDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      owner: string,
      processor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,string,string,uint8,address[])"(
      owner: string,
      processor: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      trustedIntermediaries: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSeizer(_seizer: string, overrides?: CallOverrides): Promise<boolean>;

    isSupplier(_supplier: string, overrides?: CallOverrides): Promise<boolean>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    processor(overrides?: CallOverrides): Promise<string>;

    realm(overrides?: CallOverrides): Promise<string>;

    removeAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSeizer(_seizer: string, overrides?: CallOverrides): Promise<void>;

    removeSupplier(_supplier: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rule(
      ruleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rules(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    seize(
      _account: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContact(__contact: string, overrides?: CallOverrides): Promise<void>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProcessor(
      newProcessor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRealm(newRealm: string, overrides?: CallOverrides): Promise<void>;

    setRules(
      newRules: BigNumberish[],
      newRulesParams: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedIntermediaries(
      newTrustedIntermediaries: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedIntermediaries(overrides?: CallOverrides): Promise<string[]>;

    upgradeToV2(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdministratorAdded(address)"(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    AdministratorAdded(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    "AdministratorRemoved(address)"(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    AdministratorRemoved(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "AuthorizationCanceled(address,bytes32)"(
      authorizer?: string | null,
      nonce?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { authorizer: string; nonce: string }
    >;

    AuthorizationCanceled(
      authorizer?: string | null,
      nonce?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { authorizer: string; nonce: string }
    >;

    "AuthorizationUsed(address,bytes32)"(
      authorizer?: string | null,
      nonce?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { authorizer: string; nonce: string }
    >;

    AuthorizationUsed(
      authorizer?: string | null,
      nonce?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { authorizer: string; nonce: string }
    >;

    "Burn(address,uint256)"(
      from?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    Burn(
      from?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    "ContactSet(string)"(
      contact?: null
    ): TypedEventFilter<[string], { contact: string }>;

    ContactSet(contact?: null): TypedEventFilter<[string], { contact: string }>;

    "Mint(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    Mint(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceOracleChanged(address)"(
      newPriceOracle?: string | null
    ): TypedEventFilter<[string], { newPriceOracle: string }>;

    PriceOracleChanged(
      newPriceOracle?: string | null
    ): TypedEventFilter<[string], { newPriceOracle: string }>;

    "ProcessorChanged(address)"(
      newProcessor?: string | null
    ): TypedEventFilter<[string], { newProcessor: string }>;

    ProcessorChanged(
      newProcessor?: string | null
    ): TypedEventFilter<[string], { newProcessor: string }>;

    "RealmAdministratorAdded(address)"(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    RealmAdministratorAdded(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    "RealmAdministratorRemoved(address)"(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    RealmAdministratorRemoved(
      administrator?: string | null
    ): TypedEventFilter<[string], { administrator: string }>;

    "RealmChanged(address)"(
      newRealm?: null
    ): TypedEventFilter<[string], { newRealm: string }>;

    RealmChanged(
      newRealm?: null
    ): TypedEventFilter<[string], { newRealm: string }>;

    "RulesChanged(uint256[],uint256[])"(
      newRules?: null,
      newRulesParams?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { newRules: BigNumber[]; newRulesParams: BigNumber[] }
    >;

    RulesChanged(
      newRules?: null,
      newRulesParams?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { newRules: BigNumber[]; newRulesParams: BigNumber[] }
    >;

    "Seize(address,uint256)"(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Seize(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "SeizerAdded(address)"(
      seizer?: string | null
    ): TypedEventFilter<[string], { seizer: string }>;

    SeizerAdded(
      seizer?: string | null
    ): TypedEventFilter<[string], { seizer: string }>;

    "SeizerRemoved(address)"(
      seizer?: string | null
    ): TypedEventFilter<[string], { seizer: string }>;

    SeizerRemoved(
      seizer?: string | null
    ): TypedEventFilter<[string], { seizer: string }>;

    "SupplierAdded(address)"(
      supplier?: string | null
    ): TypedEventFilter<[string], { supplier: string }>;

    SupplierAdded(
      supplier?: string | null
    ): TypedEventFilter<[string], { supplier: string }>;

    "SupplierRemoved(address)"(
      supplier?: string | null
    ): TypedEventFilter<[string], { supplier: string }>;

    SupplierRemoved(
      supplier?: string | null
    ): TypedEventFilter<[string], { supplier: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "TrustedIntermediariesChanged(address[])"(
      newTrustedIntermediaries?: null
    ): TypedEventFilter<[string[]], { newTrustedIntermediaries: string[] }>;

    TrustedIntermediariesChanged(
      newTrustedIntermediaries?: null
    ): TypedEventFilter<[string[]], { newTrustedIntermediaries: string[] }>;
  };

  estimateGas: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;
    // version(overrides?: CallOverrides & { from?: string | Promise<string> }): Promise<string>;

    addAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizationStates(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkTransfer(
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkTransferFrom(
      _from: string,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contact(overrides?: CallOverrides): Promise<BigNumber>;

    convertTo(
      _amount: BigNumberish,
      _currency: string,
      maxDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      owner: string,
      processor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,string,string,uint8,address[])"(
      owner: string,
      processor: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      trustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSeizer(_seizer: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    processor(overrides?: CallOverrides): Promise<BigNumber>;

    realm(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rule(ruleId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rules(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContact(
      __contact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProcessor(
      newProcessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRealm(
      newRealm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRules(
      newRules: BigNumberish[],
      newRulesParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedIntermediaries(
      newTrustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedIntermediaries(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeToV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INCREASE_APPROVAL_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizationStates(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkTransfer(
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkTransferFrom(
      _from: string,
      _to: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contact(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertTo(
      _amount: BigNumberish,
      _currency: string,
      maxDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseApprovalWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      owner: string,
      processor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,string,string,uint8,address[])"(
      owner: string,
      processor: string,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      trustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRealmAdministrator(
      _administrator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSeizer(
      _seizer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRealmAdministrator(
      _administrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSeizer(
      _seizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplier(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      ruleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      _account: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContact(
      __contact: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProcessor(
      newProcessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRealm(
      newRealm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRules(
      newRules: BigNumberish[],
      newRulesParams: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedIntermediaries(
      newTrustedIntermediaries: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedIntermediaries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeToV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
